generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String       @unique
  firstname         String?
  lastname          String?
  userImage         String?
  status            USER_STATUS  @default(INACTIVE)
  role              USER_ROLE    @default(USER)
  clerkid           String       @unique
  isProfileComplete Boolean      @default(false)
  activePage        Int          @default(1)
  socialLinks       socialLink[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model otherUserInfo {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  givenTest test[]
  skills    String[]
  // job information will be added later
}

enum USER_ROLE {
  USER
  ADMIN
  COMPANY
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

model socialLink {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title  String
  link   String
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.Uuid
}

model test {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  questions       question[]
  result          result         @relation(fields: [resultId], references: [id])
  resultId        String         @db.Uuid
  otherUserInfo   otherUserInfo? @relation(fields: [otherUserInfoId], references: [id])
  otherUserInfoId String?        @db.Uuid
}

model question {
  id         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  que        String
  difficulty questionDifficulty
  tags       String[]
  timeLimit  String
  marks      Int
  test       test?              @relation(fields: [testId], references: [id])
  testId     String?            @db.Uuid
}

enum questionDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCE
}

model result {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status        testResult
  obtainedMarks Int
  totalMarks    Int
  test          test[]
}

enum testResult {
  PASS
  FAIL
}
